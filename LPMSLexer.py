# Generated from C:/Users/nonda/Downloads/TrabalhoCompiladorCompleto/Compiladores-2024-2/LPMS.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,39,258,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,
        1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,5,33,205,8,33,
        10,33,12,33,208,9,33,1,34,4,34,211,8,34,11,34,12,34,212,1,34,1,34,
        4,34,217,8,34,11,34,12,34,218,3,34,221,8,34,1,35,1,35,5,35,225,8,
        35,10,35,12,35,228,9,35,1,35,1,35,1,36,1,36,5,36,234,8,36,10,36,
        12,36,237,9,36,1,36,1,36,1,37,4,37,242,8,37,11,37,12,37,243,1,37,
        1,37,1,38,1,38,1,38,1,38,5,38,252,8,38,10,38,12,38,255,9,38,1,38,
        1,38,2,226,235,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
        21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,
        43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,
        65,33,67,34,69,35,71,36,73,37,75,38,77,39,1,0,5,2,0,65,90,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,9,10,13,13,32,32,2,0,
        10,10,13,13,265,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,
        0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
        0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,
        0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,
        0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
        0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,
        0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,
        0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,
        1,79,1,0,0,0,3,87,1,0,0,0,5,90,1,0,0,0,7,95,1,0,0,0,9,101,1,0,0,
        0,11,107,1,0,0,0,13,113,1,0,0,0,15,119,1,0,0,0,17,123,1,0,0,0,19,
        129,1,0,0,0,21,134,1,0,0,0,23,138,1,0,0,0,25,145,1,0,0,0,27,150,
        1,0,0,0,29,156,1,0,0,0,31,162,1,0,0,0,33,164,1,0,0,0,35,166,1,0,
        0,0,37,168,1,0,0,0,39,170,1,0,0,0,41,173,1,0,0,0,43,176,1,0,0,0,
        45,179,1,0,0,0,47,182,1,0,0,0,49,184,1,0,0,0,51,186,1,0,0,0,53,188,
        1,0,0,0,55,190,1,0,0,0,57,192,1,0,0,0,59,194,1,0,0,0,61,196,1,0,
        0,0,63,198,1,0,0,0,65,200,1,0,0,0,67,202,1,0,0,0,69,210,1,0,0,0,
        71,222,1,0,0,0,73,231,1,0,0,0,75,241,1,0,0,0,77,247,1,0,0,0,79,80,
        5,80,0,0,80,81,5,114,0,0,81,82,5,111,0,0,82,83,5,103,0,0,83,84,5,
        114,0,0,84,85,5,97,0,0,85,86,5,109,0,0,86,2,1,0,0,0,87,88,5,105,
        0,0,88,89,5,102,0,0,89,4,1,0,0,0,90,91,5,101,0,0,91,92,5,108,0,0,
        92,93,5,115,0,0,93,94,5,101,0,0,94,6,1,0,0,0,95,96,5,119,0,0,96,
        97,5,104,0,0,97,98,5,105,0,0,98,99,5,108,0,0,99,100,5,101,0,0,100,
        8,1,0,0,0,101,102,5,112,0,0,102,103,5,114,0,0,103,104,5,105,0,0,
        104,105,5,110,0,0,105,106,5,116,0,0,106,10,1,0,0,0,107,108,5,105,
        0,0,108,109,5,110,0,0,109,110,5,112,0,0,110,111,5,117,0,0,111,112,
        5,116,0,0,112,12,1,0,0,0,113,114,5,99,0,0,114,115,5,111,0,0,115,
        116,5,110,0,0,116,117,5,115,0,0,117,118,5,116,0,0,118,14,1,0,0,0,
        119,120,5,105,0,0,120,121,5,110,0,0,121,122,5,116,0,0,122,16,1,0,
        0,0,123,124,5,102,0,0,124,125,5,108,0,0,125,126,5,111,0,0,126,127,
        5,97,0,0,127,128,5,116,0,0,128,18,1,0,0,0,129,130,5,98,0,0,130,131,
        5,111,0,0,131,132,5,111,0,0,132,133,5,108,0,0,133,20,1,0,0,0,134,
        135,5,115,0,0,135,136,5,116,0,0,136,137,5,114,0,0,137,22,1,0,0,0,
        138,139,5,114,0,0,139,140,5,101,0,0,140,141,5,116,0,0,141,142,5,
        117,0,0,142,143,5,114,0,0,143,144,5,110,0,0,144,24,1,0,0,0,145,146,
        5,116,0,0,146,147,5,114,0,0,147,148,5,117,0,0,148,149,5,101,0,0,
        149,26,1,0,0,0,150,151,5,102,0,0,151,152,5,97,0,0,152,153,5,108,
        0,0,153,154,5,115,0,0,154,155,5,101,0,0,155,28,1,0,0,0,156,157,5,
        98,0,0,157,158,5,114,0,0,158,159,5,101,0,0,159,160,5,97,0,0,160,
        161,5,107,0,0,161,30,1,0,0,0,162,163,5,43,0,0,163,32,1,0,0,0,164,
        165,5,45,0,0,165,34,1,0,0,0,166,167,5,42,0,0,167,36,1,0,0,0,168,
        169,5,47,0,0,169,38,1,0,0,0,170,171,5,61,0,0,171,172,5,61,0,0,172,
        40,1,0,0,0,173,174,5,33,0,0,174,175,5,61,0,0,175,42,1,0,0,0,176,
        177,5,62,0,0,177,178,5,61,0,0,178,44,1,0,0,0,179,180,5,60,0,0,180,
        181,5,61,0,0,181,46,1,0,0,0,182,183,5,62,0,0,183,48,1,0,0,0,184,
        185,5,60,0,0,185,50,1,0,0,0,186,187,5,33,0,0,187,52,1,0,0,0,188,
        189,5,61,0,0,189,54,1,0,0,0,190,191,5,40,0,0,191,56,1,0,0,0,192,
        193,5,41,0,0,193,58,1,0,0,0,194,195,5,123,0,0,195,60,1,0,0,0,196,
        197,5,125,0,0,197,62,1,0,0,0,198,199,5,44,0,0,199,64,1,0,0,0,200,
        201,5,59,0,0,201,66,1,0,0,0,202,206,7,0,0,0,203,205,7,1,0,0,204,
        203,1,0,0,0,205,208,1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,
        68,1,0,0,0,208,206,1,0,0,0,209,211,7,2,0,0,210,209,1,0,0,0,211,212,
        1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,220,1,0,0,0,214,216,
        5,46,0,0,215,217,7,2,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,
        1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,214,1,0,0,0,220,221,
        1,0,0,0,221,70,1,0,0,0,222,226,5,39,0,0,223,225,9,0,0,0,224,223,
        1,0,0,0,225,228,1,0,0,0,226,227,1,0,0,0,226,224,1,0,0,0,227,229,
        1,0,0,0,228,226,1,0,0,0,229,230,5,39,0,0,230,72,1,0,0,0,231,235,
        5,34,0,0,232,234,9,0,0,0,233,232,1,0,0,0,234,237,1,0,0,0,235,236,
        1,0,0,0,235,233,1,0,0,0,236,238,1,0,0,0,237,235,1,0,0,0,238,239,
        5,34,0,0,239,74,1,0,0,0,240,242,7,3,0,0,241,240,1,0,0,0,242,243,
        1,0,0,0,243,241,1,0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,
        6,37,0,0,246,76,1,0,0,0,247,248,5,47,0,0,248,249,5,47,0,0,249,253,
        1,0,0,0,250,252,8,4,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,
        1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,
        6,38,0,0,257,78,1,0,0,0,9,0,206,212,218,220,226,235,243,253,1,6,
        0,0
    ]

class LPMSLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    IF = 2
    ELSE = 3
    WHILE = 4
    PRINT = 5
    INPUT = 6
    CONST = 7
    INT_TYPE = 8
    FLOAT_TYPE = 9
    BOOL_TYPE = 10
    CHAR_TYPE = 11
    RETURN = 12
    TRUE = 13
    FALSE = 14
    BREAK = 15
    ADD = 16
    SUB = 17
    MUL = 18
    DIV = 19
    EQ = 20
    NEQ = 21
    GE = 22
    LE = 23
    GT = 24
    LT = 25
    NOT = 26
    ASSIGN = 27
    LPAREN = 28
    RPAREN = 29
    LBRACE = 30
    RBRACE = 31
    COMMA = 32
    SEMICOLON = 33
    IDENTIFIER = 34
    NUMBER = 35
    CHAR_LITERAL = 36
    STRING_LITERAL = 37
    WS = 38
    COMMENT = 39

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'Program'", "'if'", "'else'", "'while'", "'print'", "'input'", 
            "'const'", "'int'", "'float'", "'bool'", "'str'", "'return'", 
            "'true'", "'false'", "'break'", "'+'", "'-'", "'*'", "'/'", 
            "'=='", "'!='", "'>='", "'<='", "'>'", "'<'", "'!'", "'='", 
            "'('", "')'", "'{'", "'}'", "','", "';'" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "IF", "ELSE", "WHILE", "PRINT", "INPUT", "CONST", 
            "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "CHAR_TYPE", "RETURN", 
            "TRUE", "FALSE", "BREAK", "ADD", "SUB", "MUL", "DIV", "EQ", 
            "NEQ", "GE", "LE", "GT", "LT", "NOT", "ASSIGN", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "COMMA", "SEMICOLON", "IDENTIFIER", "NUMBER", 
            "CHAR_LITERAL", "STRING_LITERAL", "WS", "COMMENT" ]

    ruleNames = [ "PROGRAM", "IF", "ELSE", "WHILE", "PRINT", "INPUT", "CONST", 
                  "INT_TYPE", "FLOAT_TYPE", "BOOL_TYPE", "CHAR_TYPE", "RETURN", 
                  "TRUE", "FALSE", "BREAK", "ADD", "SUB", "MUL", "DIV", 
                  "EQ", "NEQ", "GE", "LE", "GT", "LT", "NOT", "ASSIGN", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COMMA", "SEMICOLON", 
                  "IDENTIFIER", "NUMBER", "CHAR_LITERAL", "STRING_LITERAL", 
                  "WS", "COMMENT" ]

    grammarFileName = "LPMS.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


